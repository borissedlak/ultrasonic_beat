import processing.sound.*;
import processing.serial.*;

SoundFile chant, clap, hat, kick, sax_loop, snare;
Serial myPort;
int input = 0;
long startTime = 0;
int duration;
float loudness = 1f;
ArrayList circles = new ArrayList();

void setup() {
  size(1030, 515);
  background(255);
  //println(Serial.list());
  String portName = Serial.list()[1];
  myPort = new Serial(this, portName, 9600);

  // Load a soundfile from the /data folder of the sketch and play it back
  chant = new SoundFile(this, "chant.wav");
  clap = new SoundFile(this, "clap.wav");
  hat = new SoundFile(this, "hat.wav");
  kick = new SoundFile(this, "kick.wav");
  sax_loop = new SoundFile(this, "sax_loop.wav");
  snare = new SoundFile(this, "snare.wav");
  //sax_loop.loop();


  fill(#ee26a0, 190);
  ellipse(0, 0, 1000, 1000);
  fill(#8926ee, 190);
  ellipse(0, 0, 800, 800);
  fill(#26afee, 190);
  ellipse(0, 0, 600, 600);
  fill(#eec626, 190);
  ellipse(0, 0, 400, 400);
  noFill();

  circles.add(new FadingCircle(1000, 1000));
}      

void draw() {
  drawRadar();
  drawText();
  while (myPort.available() > 0) {
    input = myPort.read();
    //checkInput(input);
  }
}

void checkInput(int val) {
  println(val);

  switch(val) {
  case 1: 
    playSound(kick);
    break;
  case 2: 
    playSound(clap);
    break;
  case 3: 
    playSound(snare);
    break;
  case 4: 
    playSound(chant);
    break;
  case 72: 
    loudness *= 2;
    break;
  case 76: 
    loudness /= 2;
    break;
  case 90: 
    loudness = 1f;
    break;
  }
}

void playSound(SoundFile file) {
  long currentTime = System.nanoTime();
  if ((startTime + duration) < currentTime) {
    startTime = System.nanoTime();
    duration = (int)(file.duration() * 1000000000);
    //println("Case 1: "+duration);
    file.play(1, loudness);
  } else {
    //println("Current:"+currentTime+", Goal:"+(startTime+duration));
  }
}

void drawRadar() {
  //pushMatrix();
  translate(515, 515); // moves the starting coordinats to new location
  fill(255);
  strokeWeight(4);
  stroke(#5eee1c, 190);

  //draw the colored circles

  for (int i=0; i<circles.size(); i++) {
    FadingCircle fc = (FadingCircle) circles.get(i);
    fc.run();
  }

  // draws the arc lines
  arc(0, 0, 1000, 1000, PI, TWO_PI);
  arc(0, 0, 800, 800, PI, TWO_PI);
  arc(0, 0, 600, 600, PI, TWO_PI);
  arc(0, 0, 400, 400, PI, TWO_PI);

  // draws the angle lines
  line(-960, 0, 960, 0);
  line(0, 0, -960*cos(radians(30)), -960*sin(radians(30)));
  line(0, 0, -960*cos(radians(60)), -960*sin(radians(60)));
  line(0, 0, -960*cos(radians(90)), -960*sin(radians(90)));
  line(0, 0, -960*cos(radians(120)), -960*sin(radians(120)));
  line(0, 0, -960*cos(radians(150)), -960*sin(radians(150)));
  line(-960*cos(radians(30)), 0, 960, 0);

  fill(#ff4141, 255);
  ellipse(0, 0, 200, 200);
  //popMatrix();
}

void drawText() { // draws the texts on the screen

  pushMatrix();
  fill(0);
  noStroke();
  rect(0, 1010, width, 1080);
  fill(98, 245, 31);
  textSize(18);
  text("23cm", 125, -10);
  text("31cm", 225, -10);
  text("39cm", 325, -10);
  text("47cm", 425, -10);
  popMatrix();
}

class FadingCircle {

  int x, y;
  color c;
  int defaultTransparency, currentTransparency;

  FadingCircle(int x, int y, color c, int transparency = 190) {
    this.x = x;
    this.y = y;
    this.c = c;
    this.defaultTransparency = transparency;
    this.defaultTransparency = transparency;
  }
}